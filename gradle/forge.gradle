repositories {
    maven {
        name = "Maxanier"
        url = "https://maven.maxanier.de/releases"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
    }
    maven {
        name = "cheaterpaul snapshots"
        url = "https://maven.paube.de/snapshots"
    }
    maven {
        url "https://nexus.resourcefulbees.com/repository/maven-public/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev/"
        content {
            includeGroup "mezz.jei"
        }
    }
    mavenCentral()
    mavenLocal()
}

apply from: 'gradle/crowdin.gradle'

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    //Vampirism
    implementation fg.deobf("de.teamlapen.vampirism:Vampirism:${project.minecraft_version}-${project.vampirism_version}")
    implementation fg.deobf("de.maxanier.guideapi:Guide-API-VP:${project.guideapi_version}")

    //Utility
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:${project.jei_version}") //API for compile
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:${project.jei_version}") //API for compile
    runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:${project.jei_version}") //Full for runtime

    //Mixin preprocessor
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }

    // Terrablender for biome addition
    compileOnly fg.deobf("com.github.glitchfiend:TerraBlender-forge:${project.terrablender_version}")
    // Only enable for testing
//    runtimeOnly fg.deobf("com.github.glitchfiend:TerraBlender-forge:${project.terrablender_version}")

    // Blame for debugging
//    runtimeOnly fg.deobf("com.telepathicgrunt:Blame:${project.blame_version}")
}

minecraft {
    mappings channel: "${project.mcp_channel}".toString(), version: "${project.mcp_mappings}".toString()
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        client {
            taskName 'runClient'
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.markers', 'REGISTRIES'
            property 'vampirism_target', 'dev_client'
            workingDirectory project.file('run/client').canonicalPath
            jvmArg '-ea:de.teamlapen...'

            mods {
                werewolves {
                    source sourceSets.main
                    source sourceSets.api
                }
            }

        }
        client2 {
            parent runs.client
            taskName 'runClient2'
            arg '--username=Dev2'
        }
        clientJBR {
            parent runs.client
            taskName 'runClientJBR'
            jvmArg "-XX:+AllowEnhancedClassRedefinition"
        }
        server {
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'vampirism_target', 'dev_server'
            workingDirectory project.file('run/server').canonicalPath
            jvmArg '-ea:de.teamlapen...'

            mods {
                werewolves {
                    source sourceSets.main
                    source sourceSets.api
                }


            }
        }
        serverJBR {
            parent runs.server
            taskName 'runServerJBR'
            jvmArg "-XX:+AllowEnhancedClassRedefinition"
        }
        data {
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'vampirism_target', 'dev_data'
            workingDirectory project.file('run/data').canonicalPath
            args '--mod', 'werewolves', '--all', '--output', file('src/generated/resources/'),  '--existing', sourceSets.main.resources.srcDirs[0]
            mods {
                werewolves {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }

}

jar {
    finalizedBy('reobfJar')

    //Keep the jar as clean as possible
    includeEmptyDirs = false

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir

    from{
        fileTree('build/translations').matching{
            exclude "**/en_us.json" //Don't override local source file
        }
    }



    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "werewolves",
                "Specification-Vendor": "cheaterpaul",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": "Werewolves",
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"cheaterpaul",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "werewolves.mixins.json"
        ])
    }

}

//Replace strings in IDEA folders as well
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = ['version': project.mod_version, 'mcversion': minecraft_version, 'forge_version': forge_version, 'jei_version': jei_version, 'guideapi_version': guideapi_version, 'vampirism_version': vampirism_version]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
    exclude '**/Thumbs.db'

}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "werewolves.refmap.json"
    config 'werewolves.mixins.json'

    debug.verbose = true
    debug.export = true
}